{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"s",
				"s2"
			],
			[
				"re",
				"reverseStack"
			],
			[
				"pri",
				"printStack"
			],
			[
				"c",
				"cout"
			],
			[
				"st",
				"stack"
			],
			[
				"p",
				"printStack"
			],
			[
				"an",
				"answer"
			],
			[
				"de",
				"delete"
			],
			[
				"a",
				"ans"
			],
			[
				"str",
				"string"
			],
			[
				"mi",
				"minimum"
			],
			[
				"ma",
				"maximum"
			],
			[
				"s_",
				"s_r"
			],
			[
				"co",
				"count"
			],
			[
				"cou",
				"count_bsts"
			],
			[
				"I",
				"INT_MIN"
			],
			[
				"pr",
				"printInc"
			],
			[
				"v",
				"vector	std::vector"
			],
			[
				"in",
				"insertFirst"
			],
			[
				"h",
				"head3"
			],
			[
				"ad",
				"addRecur"
			],
			[
				"n",
				"n"
			],
			[
				"ch",
				"char"
			],
			[
				"t",
				"t"
			],
			[
				"print",
				"printTraversal"
			],
			[
				"tr",
				"TrieNode"
			],
			[
				"is",
				"is_terminal"
			],
			[
				"no",
				"no_of_words"
			],
			[
				"cha",
				"characters"
			],
			[
				"ins",
				"insert"
			],
			[
				"sing",
				"singleRotateRight"
			],
			[
				"dou",
				"doubleRotateRight"
			],
			[
				"sin",
				"singleRotateLeft"
			],
			[
				"si",
				"singleRotateLeft"
			],
			[
				"inser",
				"insertRecur"
			],
			[
				"se",
				"second"
			],
			[
				"lef",
				"leftTaken"
			],
			[
				"l",
				"leftTaken"
			],
			[
				"su",
				"super_parent"
			],
			[
				"fi",
				"first"
			],
			[
				"fin",
				"findnode"
			],
			[
				"get",
				"getData"
			],
			[
				"pa",
				"parent"
			],
			[
				"path",
				"path2"
			],
			[
				"con",
				"convertToHeap"
			],
			[
				"he",
				"head"
			],
			[
				"head",
				"head1"
			],
			[
				"hea",
				"head1"
			],
			[
				"m",
				"min_compare"
			],
			[
				"min",
				"min_heap"
			],
			[
				"pu",
				"push_heap"
			],
			[
				"pus",
				"push_back"
			],
			[
				"beg",
				"begin"
			],
			[
				"pop",
				"pop_back"
			],
			[
				"i",
				"i"
			],
			[
				"e",
				"end"
			],
			[
				"new",
				"new_p2"
			],
			[
				"f",
				"findMinCoins"
			],
			[
				"int",
				"interLeaviing_check2"
			],
			[
				"ine",
				"interLeaviing_check"
			],
			[
				"en",
				"endl"
			],
			[
				"j",
				"j"
			],
			[
				"LI",
				"LIS_recur"
			],
			[
				"heap",
				"heapify"
			],
			[
				"count",
				"count-1"
			],
			[
				"te",
				"temp"
			],
			[
				"pt",
				"printofy"
			],
			[
				"wo",
				"word2"
			],
			[
				"N",
				"numofIslands"
			],
			[
				"bf",
				"BFSUtil"
			],
			[
				"cc",
				"ccs2"
			],
			[
				"BF",
				"BFS"
			],
			[
				"it",
				"it"
			],
			[
				"q",
				"queue"
			],
			[
				"df",
				"DFS"
			],
			[
				"be",
				"begin"
			],
			[
				"ve",
				"vertices"
			],
			[
				"FA",
				"false"
			],
			[
				"prev",
				"prev_mid"
			],
			[
				"pre",
				"prev_mid"
			],
			[
				"edn",
				"endl"
			],
			[
				"end",
				"endl"
			],
			[
				"size",
				"sizeof"
			],
			[
				"prin",
				"printLL"
			],
			[
				"ne",
				"next"
			],
			[
				"max",
				"max2"
			],
			[
				"d",
				"d"
			],
			[
				"find",
				"findNode"
			],
			[
				"ge",
				"getData"
			],
			[
				"set",
				"setData"
			],
			[
				"getR",
				"getRoot"
			],
			[
				"strt",
				"start"
			],
			[
				"b",
				"bool"
			],
			[
				"root",
				"root"
			],
			[
				"ans",
				"ans2"
			],
			[
				"r",
				"root"
			],
			[
				"findMax",
				"findMaxElement"
			],
			[
				"po",
				"pop"
			],
			[
				"Q",
				"circularQ"
			],
			[
				"reg",
				"regex"
			],
			[
				"stat",
				"startCol"
			],
			[
				"prim",
				"primes"
			],
			[
				"bo",
				"board"
			],
			[
				"fo",
				"forCount"
			],
			[
				"so",
				"sortHead"
			],
			[
				"ev",
				"checkEven"
			],
			[
				"k",
				"kReverse"
			],
			[
				"ta",
				"tail"
			],
			[
				"sum",
				"sum2"
			],
			[
				"cur",
				"curr_start"
			],
			[
				"cu",
				"curr_start"
			],
			[
				"le",
				"letters1"
			],
			[
				"sw",
				"swapLL"
			],
			[
				"tem",
				"temp2"
			],
			[
				"swap",
				"characterSwap"
			],
			[
				"return",
				"returnval"
			],
			[
				"pi",
				"piv_pos-1"
			],
			[
				"T",
				"T1"
			],
			[
				"ami",
				"amit_min"
			],
			[
				"dev",
				"devu_max"
			],
			[
				"pol",
				"polygon"
			],
			[
				"poi",
				"points"
			],
			[
				"u",
				"user_likes"
			],
			[
				"me",
				"message"
			],
			[
				"fun",
				"function"
			],
			[
				"li",
				"life	statement"
			],
			[
				"sc",
				"score	statement"
			],
			[
				"bl",
				"blackBrick	statement"
			]
		]
	},
	"buffers":
	[
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 392.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"Anaconda: Autoformat PEP8 Errors"
			],
			[
				"Package Control: inst",
				"Package Control: Install Package"
			],
			[
				"insta",
				"Package Control: Install Package"
			]
		],
		"width": 449.0
	},
	"console":
	{
		"height": 139.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = 'eb2297e1a458f27d836c04bb0cbaf282' + 'd0e7a3098092775ccb37ca9d6b2e4b7d'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/home/kritesh/Project/application/config/database.php",
		"/home/kritesh/Desktop/A3Ktorrent/main.py",
		"/home/kritesh/try.go",
		"/home/kritesh/CODING/PREPARATION/prep/heaps/heap",
		"/home/kritesh/Desktop/python/linked_list.py",
		"/home/kritesh/CODING/PREPARATION/prep/test5/traversal.cpp",
		"/home/kritesh/Desktop/game.html",
		"/home/kritesh/CODING/PREPARATION/prep/trees/TrieTesting.cpp",
		"/home/kritesh/CODING/PREPARATION/prep/trees/Trie.h",
		"/home/kritesh/CODING/PREPARATION/prep/trees/TrieNode.h",
		"/home/kritesh/CODING/PREPARATION/prep/trees/trie.cpp",
		"/home/kritesh/CODING/PREPARATION/prep/trees/avl.cpp",
		"/home/kritesh/Desktop/tic_tac_toe.cpp",
		"/home/kritesh/CODING/PREPARATION/prep/heaps/heap.cpp",
		"/home/kritesh/CODING/PREPARATION/prep/class9/inorder_sucessor.cpp",
		"/home/kritesh/CODING/PREPARATION/prep/test1/q2.cpp",
		"/home/kritesh/CODING/PREPARATION/prep/class6/lexicalOrder.cpp",
		"/home/kritesh/CODING/PREPARATION/prep/heaps/stream_of_numbers_find_median.cpp",
		"/home/kritesh/CODING/PREPARATION/prep/heaps/stl_try.cpp",
		"/home/kritesh/CODING/PREPARATION/prep/heaps/almost_soted_at_k.cpp",
		"/home/kritesh/CODING/codechef/chef_and_cube.cpp",
		"/home/kritesh/CODING/codechef/july_2015/lucky_stone.cpp",
		"/home/kritesh/CODING/PREPARATION/prep/heaps/heap_sort.cpp",
		"/home/kritesh/CODING/PREPARATION/prep/heaps/find_k_largest_elements.cpp",
		"/home/kritesh/CODING/PREPARATION/prep/heaps/merge_K_sorted_vectors.cpp",
		"/home/kritesh/CODING/PREPARATION/prep/heaps/convert_bst-into_heap.cpp",
		"/home/kritesh/CODING/PREPARATION/prep/ass4/q13.cpp",
		"/home/kritesh/CODING/PREPARATION/prep/graphs/heap.cpp",
		"/home/kritesh/CODING/PREPARATION/prep/ass5/q4_interleaving_of_two_strings.cpp",
		"/home/kritesh/CODING/PREPARATION/prep/ass5/q3_make_string_palindrome.cpp",
		"/home/kritesh/CODING/PREPARATION/prep/ass5/q1_longest_inc_subsequence.cpp",
		"/home/kritesh/CODING/PREPARATION/prep/ass5/q2_longest_substring_palindrome.cpp",
		"/home/kritesh/CODING/PREPARATION/prep/ass5/find_arrangements.cpp",
		"/home/kritesh/Desktop/A3Ktorrent/torrent.py",
		"/home/kritesh/.config/sublime-text-3/Packages/Package Control/Package Control.sublime-settings",
		"/home/kritesh/.config/sublime-text-3/Packages/User/Package Control.sublime-settings",
		"/home/kritesh/.config/sublime-text-3/Packages/Anaconda/Anaconda.sublime-settings",
		"/home/kritesh/CODING/PREPARATION/prep/test3/q3.cpp",
		"/home/kritesh/CODING/PREPARATION/prep/test1/q1.cpp",
		"/home/kritesh/CODING/PREPARATION/prep/class7/printKBT.cpp",
		"/home/kritesh/CODING/PREPARATION/prep/class7/lcaBT.cpp",
		"/home/kritesh/CODING/PREPARATION/prep/class7/checkBalancedBT.cpp",
		"/home/kritesh/CODING/PREPARATION/prep/class7/prettyBT.cpp",
		"/home/kritesh/CODING/PREPARATION/prep/test3/q1.cpp",
		"/home/kritesh/CODING/PREPARATION/prep/test1/q3.cpp",
		"/home/kritesh/CODING/PREPARATION/prep/graphs/snake_and_ladder.cpp",
		"/home/kritesh/CODING/PREPARATION/prep/graphs/alien_language.cpp",
		"/home/kritesh/CODING/PREPARATION/prep/graphs/num_of_islands.cpp",
		"/home/kritesh/CODING/PREPARATION/prep/graphs/graph.cpp",
		"/home/kritesh/CODING/PREPARATION/prep/class9/BST.cpp",
		"/home/kritesh/CODING/PREPARATION/prep/test4/q1.cpp",
		"/home/kritesh/CODING/PREPARATION/prep/test3/q2.cpp",
		"/home/kritesh/CODING/PREPARATION/lectures/assignments/DynamicProgramming (2).pdf",
		"/home/kritesh/CODING/PREPARATION/prep/class7/binaryTree.cpp",
		"/home/kritesh/CODING/PREPARATION/prep/test4/q2.cpp",
		"/home/kritesh/CODING/PREPARATION/prep/test4/min_steps_to_reach.cpp",
		"/home/kritesh/CODING/PREPARATION/lectures/pointers example/OOPS/vector.h",
		"/home/kritesh/CODING/PREPARATION/prep/class7/seperateLL.cpp",
		"/home/kritesh/CODING/PREPARATION/prep/class7/zigzagBT.cpp",
		"/home/kritesh/CODING/PREPARATION/prep/class7/nextLargestElement.cpp",
		"/home/kritesh/CODING/PREPARATION/prep/class7/tree.cpp",
		"/home/kritesh/CODING/PREPARATION/prep/class7/input.txt",
		"/home/kritesh/CODING/PREPARATION/prep/class6/ddLL/ayush.cpp",
		"/home/kritesh/CODING/PREPARATION/prep/class6/ddLL/doublell.cpp",
		"/home/kritesh/CODING/PREPARATION/prep/class6/Qll.cpp",
		"/home/kritesh/CODING/PREPARATION/prep/class6/infixtopostfix.cpp",
		"/home/kritesh/CODING/PREPARATION/prep/class6/arrayStack.cpp",
		"/home/kritesh/CODING/PREPARATION/prep/class6/circularQ.cpp",
		"/home/kritesh/CODING/PREPARATION/hashtable.cpp",
		"/home/kritesh/CODING/PREPARATION/prep/ass4/q16.cpp",
		"/home/kritesh/CODING/PREPARATION/prep/ass4/q11.cpp",
		"/home/kritesh/CODING/PREPARATION/prep/ass4/q12.cpp",
		"/home/kritesh/CODING/PREPARATION/prep/ass4/q1.cpp",
		"/home/kritesh/CODING/PREPARATION/prep/ass4/input.txt",
		"/home/kritesh/CODING/PREPARATION/prep/ass4/q15.cpp",
		"/home/kritesh/CODING/PREPARATION/prep/ass4/ratInMaze.cpp",
		"/home/kritesh/CODING/PREPARATION/prep/ass4/check.cpp",
		"/home/kritesh/CODING/PREPARATION/hacker/q10.cpp",
		"/home/kritesh/CODING/PREPARATION/lectures/pointers example/L5/RatInAMaze.cpp",
		"/home/kritesh/CODING/PREPARATION/prep/class5/checkReverse.cpp",
		"/home/kritesh/CODING/PREPARATION/prep/ass4/q2.cpp",
		"/home/kritesh/CODING/PREPARATION/prep/ass4/q3.cpp",
		"/home/kritesh/CODING/PREPARATION/prep/ass4/q5.cpp",
		"/home/kritesh/CODING/PREPARATION/prep/ass4/q6.cpp",
		"/home/kritesh/CODING/PREPARATION/prep/ass4/q7.cpp",
		"/home/kritesh/CODING/PREPARATION/prep/ass4/q8.cpp",
		"/home/kritesh/CODING/PREPARATION/prep/ass4/q9.cpp",
		"/home/kritesh/CODING/PREPARATION/prep/ass2/check.c",
		"/home/kritesh/CODING/PREPARATION/prep/ass2/q3.cpp",
		"/home/kritesh/CODING/PREPARATION/prep/class5/countSort.cpp",
		"/home/kritesh/CODING/PREPARATION/prep/ass1/sort.cpp",
		"/home/kritesh/CODING/PREPARATION/prep/question2.cpp",
		"/home/kritesh/CODING/PREPARATION/prep/ass3/q10.cpp",
		"/home/kritesh/CODING/PREPARATION/prep/ass3/8g.cpp",
		"/home/kritesh/CODING/PREPARATION/prep/class5/kReverse.cpp",
		"/home/kritesh/CODING/PREPARATION/cracking_the_coding_interview/1/q1.cpp",
		"/home/kritesh/CODING/PREPARATION/cracking_the_coding_interview/1/q2.cpp",
		"/home/kritesh/CODING/PREPARATION/cracking_the_coding_interview/1/q3.cpp",
		"/home/kritesh/CODING/PREPARATION/cracking_the_coding_interview/1/q4.cpp",
		"/home/kritesh/KRITESH/BOOKS/SubSets.cpp",
		"/home/kritesh/CODING/PREPARATION/prep/ass3/mixed/q20.cpp",
		"/home/kritesh/CODING/PREPARATION/prep/question.cpp",
		"/home/kritesh/CODING/PREPARATION/prep/class5/llReverse.cpp",
		"/home/kritesh/CODING/PREPARATION/prep/ass3/q8a.cpp",
		"/home/kritesh/CODING/PREPARATION/prep/ass3/q8b.cpp",
		"/home/kritesh/CODING/PREPARATION/prep/ass3/q8c.cpp",
		"/home/kritesh/CODING/PREPARATION/prep/ass3/q8d.cpp",
		"/home/kritesh/CODING/PREPARATION/prep/ass3/q8e.cpp",
		"/home/kritesh/CODING/PREPARATION/prep/ass3/mixed/q12.cpp",
		"/home/kritesh/CODING/PREPARATION/prep/ass3/mixed/q13.cpp",
		"/home/kritesh/CODING/PREPARATION/prep/ass3/mixed/q15.cpp",
		"/home/kritesh/CODING/PREPARATION/prep/ass3/mixed/q14.cpp",
		"/home/kritesh/CODING/PREPARATION/prep/ass3/mixed/q17.cpp",
		"/home/kritesh/CODING/PREPARATION/prep/ass3/mixed/q19.cpp",
		"/home/kritesh/CODING/PREPARATION/prep/ass3/mixed/q18.cpp",
		"/home/kritesh/CODING/PREPARATION/prep/ass3/q8f.cpp",
		"/home/kritesh/CODING/PREPARATION/prep/ass3/q8i.cpp",
		"/home/kritesh/CODING/PREPARATION/prep/ass3/q11.cpp",
		"/home/kritesh/CODING/PREPARATION/prep/ass3/q9.cpp",
		"/home/kritesh/CODING/PREPARATION/prep/ass3/q6.cpp",
		"/home/kritesh/CODING/PREPARATION/prep/ass3/q5.cpp",
		"/home/kritesh/CODING/PREPARATION/prep/ass3/q3.cpp",
		"/home/kritesh/CODING/PREPARATION/prep/ass3/q2.cpp",
		"/home/kritesh/CODING/PREPARATION/prep/ass3/q4.cpp",
		"/home/kritesh/CODING/PREPARATION/prep/ass3/q7.cpp",
		"/home/kritesh/codechef/june_challenge_2015/steady_tables.cpp",
		"/home/kritesh/CODING/PREPARATION/prep/ass1/q6.cpp",
		"/home/kritesh/kritesh.html"
	],
	"find":
	{
		"height": 25.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"base",
			";\n",
			"paint",
			"paint()",
			"check_",
			"init()",
			"check_coll",
			"paint()",
			"game_loop",
			"clearinterval",
			"\\0",
			"		\n",
			"inorder",
			"min",
			"insert",
			"lefttaken",
			"find",
			"findmin",
			"getmax",
			"getmin",
			"findnode",
			"ino",
			"print",
			"head",
			"	\n",
			";\n",
			"cout",
			"		\n",
			"ans",
			"lin",
			"false",
			"endl",
			";\n",
			"for (int i = 1; i < n; ++i)\n	{\n		for (int j = 1; j < n;j++)\n		{\n			if(i == j)\n			{\n				ans[i][j] = true;\n				//continue;\n			}\n			else if(j = i+1)//2 length\n			{\n				continue;\n			}\n			else if(s[i] == s[j])\n			{\n				if((i+1)>=0 && (i+1)<n && (j-1)>=0 && (j-1)<n && ans[i+1][j-1])\n				{\n					ans[i][j] = true;\n					if(ans[i][j] > m)\n					{\n						m = ans[i][j];\n						start = i;\n						end = j;\n					}\n				}\n			}\n		}\n	}",
			"top",
			"front",
			"Node",
			"setroot",
			"findmin",
			"findmac",
			"findn",
			"());",
			"getroot",
			"findMax",
			"max ",
			"delet",
			";\n",
			"getr",
			"data()",
			"count",
			"1",
			"node",
			"resize",
			"init_",
			";\n",
			"getsi",
			"();\n",
			"T",
			"s",
			"Stack",
			"size",
			"n",
			"b",
			"j",
			"used",
			"swap",
			");\n",
			"c",
			"cout",
			";\n",
			"M:",
			"\";\n",
			"int",
			"django.db",
			"default_from",
			"form",
			"ser-result",
			"user-result",
			"potrait",
			"link",
			"get",
			"login",
			"get",
			"getau",
			"getauthres",
			"getStatus",
			"checkLoginState",
			"getLoginStatus",
			"statusChangeCallback",
			"body",
			"statusChangeCallback",
			"checkLoginState",
			"fb.login",
			"login",
			"fb.ini",
			"statuschan",
			"getStatus",
			"getLoginStatus",
			"statusChangeCallback",
			"testAPI",
			"secret",
			"loca",
			"ABOUT FREELANCER",
			"mail/",
			"contact_me.php",
			"conatct",
			"conatct_me",
			"conatct_me.php",
			"title",
			"<!",
			"contact me",
			"form",
			"php",
			"SIZE",
			"frame",
			"sucess",
			"time",
			"udp",
			"find_",
			"find",
			"distutils",
			"disutils",
			"packa",
			"src.main",
			"src,main",
			"start_dow",
			"button",
			"term"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
			]
		}
	],
	"incremental_find":
	{
		"height": 25.0
	},
	"input":
	{
		"height": 34.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "config.sublime-project",
	"replace":
	{
		"height": 46.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 187.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
